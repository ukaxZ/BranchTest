前三个月：
QWERTYUIOASDAGHSVFZXC
ASDASFQOIUHFBAAAAAAAD
FOSDINVOZSCVNXXZVCONA

Day2：
B 也对曾经的文件进行了修改
结论：A 和 B 不能同时对曾经的相同文件进行修改，否则就要解决冲突

Day3：
由于解决冲突的 Commit 中，先对 A 中的冲突内容进行了删除
所以，哪怕第二天 A 在 B 之前 Commit 后（这一步意味着解决冲突的 Commit 操作对象就是 A 本地的文件），没有在本地修改自己的冲突内容，
到了第三天，A 合并 Main 时，自己的冲突内容也会被解决冲突的 Commit 修改。丢失了！

Git 对文件的管理，其实就是对每个文件的一个个 Commit History。

Day4：
其他开发人员修改了历史文件，A 没有参与
A合并时，直接可以成功。

总结：避免让一个文件接受的 Commit 是对非当前状态的操作。

Day5：
然后，A进行了第五天对历史文件的修改。
在修改前，Main 中的历史文件没有解决冲突的 Commit History，而 A 中则有这条 History.
现在，检查合并到 Main 后会不会出现冲突 Commit。